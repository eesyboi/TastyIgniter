<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');
class Specials extends CI_Controller {

	private $error = array();

	public function __construct() {
		parent::__construct();
		$this->load->library('user');
		$this->load->model('Specials_model');
		$this->load->library('pagination');
		//$this->load->library('upload');
		$this->output->enable_profiler(TRUE); // for debugging profiler... remove later
	}

	public function index() {
		$this->load->library('currency');

		//check if file exists in views
		if ( !file_exists('application/views/admin/specials.php')) {
			// Whoops, we don't have a page for that!
			show_404();
		}

		if (!$this->user->islogged()) {  
  			redirect('admin/login');
		}
		
    	if (!$this->user->hasPermissions('access', 'admin/specials')) {
  			redirect('admin/permission');
		}
		
		if ($this->session->flashdata('alert')) {
			$data['alert'] = $this->session->flashdata('alert');
		} else { 
			$data['alert'] = '';
		}
											
		if ($this->uri->segment(3)) {
			$page = $this->uri->segment(3);
		} else {
			$page = 0;
		}
				
		$data['heading'] 			= 'Specials';
		$data['sub_menu_add'] 		= 'Add';
		$data['sub_menu_delete'] 	= 'Delete';
		$data['sub_menu_list'] 		= '<li><a id="menu-add">Add new special</a></li>';
		$data['text_empty'] 		= 'There are no specials.';
		
		$config['base_url'] = $this->config->site_url('admin/specials');
		$config['total_rows'] = $this->Specials_model->record_count();
		$config['per_page'] = 20;
		$config['uri_segment'] = 3;
		$choice = $config['total_rows'] / $config['per_page'];
		$config['num_links'] = round($choice);
		$config['use_page_numbers'] = TRUE;
		
		$this->pagination->initialize($config);

		$data['specials'] = array();
		$results = $this->Specials_model->getList($config['per_page'], $page);
		foreach ($results as $result) {
			
			if ($result['special_photo']) {
				$special_photo_src = $this->config->base_url('assets/img/' . $result['special_photo']);
			} else {
				$special_photo_src = $this->config->base_url('assets/img/no_menu_photo.png');
			}

			$data['specials'][] = array(
				'special_id'			=> $result['special_id'],
				'special_name'			=> $result['special_name'],
				'special_description'	=> $result['special_description'],
				'special_price'			=> $this->currency->format($result['special_price']),
				'start_date'			=> $result['start_date'],
				'end_date'				=> $result['end_date'],
				'special_photo'			=> $special_photo_src,
				'stock_qty'				=> $result['stock_qty'],
				'edit' 					=> $this->config->site_url('admin/specials/edit/' . $result['special_id'])
			);
		}	

		// check if POST add_deal, validate fields and add Special to model
		if ($this->input->post() && $this->_addSpecial() === TRUE) {
		
			redirect('admin/specials');
		}

		//check if POST update_deal then remove special_id
		if ($this->input->post('delete') && $this->_deleteSpecial() === TRUE) {
			
			redirect('admin/specials');  			
		}	

		$this->load->view('admin/header', $data);
		$this->load->view('admin/specials', $data);
		$this->load->view('admin/footer');
	}

	public function edit() {
		//check if file exists in views
		if ( !file_exists('application/views/admin/specials_edit.php')) {
			// Whoops, we don't have a page for that!
			show_404();
		}
		
		if (!$this->user->islogged()) {  
  			redirect('admin/login');
		}

    	if (!$this->user->hasPermissions('access', 'admin/specials')) {
  			redirect('admin/permission');
		}
		
		//check if /food_id is set in uri string
		if (is_numeric($this->uri->segment(4))) {
			$special_id = (int)$this->uri->segment(4);
		} else {
		    redirect('admin/specials');
		}

		if ($this->session->flashdata('alert')) {
			$data['alert'] = $this->session->flashdata('alert');
		} else { 
			$data['alert'] = '';
		}		

		$special_info = $this->Specials_model->getSpecial($special_id);
		if ($special_info) {
			$data['heading'] 	= 'Special Update ('. $special_info['special_name'] .')';
			$data['sub_menu_update'] 	= 'Update';

			$data['special_id']				=	$special_info['special_id'];
			$data['special_name']			=	$special_info['special_name'];
			$data['special_description']	=	$special_info['special_description'];
			$data['special_price']			=	$special_info['special_price'];
			$data['start_date']				=	$special_info['start_date'];
			$data['end_date']				=	$special_info['end_date'];
			$data['stock_qty']				=	$special_info['stock_qty'];

			// check if POST add_food, validate fields and add Food to model
			if ($this->input->post() && $this->_updateSpecial($special_id) === TRUE) {
						
				redirect('admin/specials');
			}
		
						
			//Remove Food
			if ($this->input->post('delete') && $this->_deleteSpecial($special_id) === TRUE) {
					
				redirect('admin/specials');
			}
		}
				
		$this->load->view('admin/header', $data);
		$this->load->view('admin/specials_edit', $data);
		$this->load->view('admin/footer');
	}

	public function _addSpecial() {
									
    	if ( ! $this->user->hasPermissions('modify', 'admin/specials')) {
		
			$this->session->set_flashdata('alert', '<p class="warning">Warning: You do not have permission to modify!</p>');
  			return TRUE;
  	
    	} else {
    	
			//form validation
			$this->form_validation->set_rules('special_name', 'Special Name', 'trim|required|min_length[2]|max_length[128]');
			$this->form_validation->set_rules('special_description', 'Special Description', 'trim|required|min_length[2]|max_length[1028]');
			$this->form_validation->set_rules('special_price', 'Special Price', 'trim|required|numeric');
			$this->form_validation->set_rules('start_date', 'Start Date', 'trim|required|callback_handle_date');
			$this->form_validation->set_rules('end_date', 'End Date', 'trim|required|callback_handle_date');
			$this->form_validation->set_rules('special_photo', 'Special Photo', 'callback_handle_upload');
			$this->form_validation->set_rules('stock_qty', 'Stock Quantity', 'trim|required|integer');

			//if validation is true
			if ($this->form_validation->run() === TRUE) {
				$add = array();
								
				//Sanitizing the POST values
				$add['special_name'] 			= $this->input->post('special_name');
				$add['special_description'] 	= $this->input->post('special_description');
				$add['special_price'] 			= $this->input->post('special_price');
				$add['start_date'] 				= $this->input->post('start_date');
				$add['end_date'] 				= $this->input->post('end_date');
				$add['special_photo'] 			= $this->input->post('special_photo');			
				$add['stock_qty'] 				= $this->input->post('stock_qty');			
				
				if ($this->Specials_model->addSpecial($add)) {
				
					$this->session->set_flashdata('alert', '<p class="success">Special Added Sucessfully!</p>');
				
				} else { 
				
					$this->session->set_flashdata('alert', '<p class="warning">Nothing Added!</p>');
				
				}

				return TRUE;
			}
		}	
	}
	
	public function _updateSpecial($special_id) {
						
   		if ( ! $this->user->hasPermissions('modify', 'admin/specials')) {
		
			$this->session->set_flashdata('alert', '<p class="warning">Warning: You do not have permission to modify!</p>');
  			return TRUE;
  	
    	} else if (!$this->input->post('delete')) {
			
			$this->form_validation->set_rules('special_name', 'Special Name', 'trim|required|min_length[2]|max_length[128]');
			$this->form_validation->set_rules('special_description', 'Special Description', 'trim|required|min_length[2]|max_length[1028]');
			$this->form_validation->set_rules('special_price', 'Special Price', 'trim|required|numeric');
			$this->form_validation->set_rules('start_date', 'Start Date', 'trim|required|callback_handle_date');
			$this->form_validation->set_rules('end_date', 'End Date', 'trim|required|callback_handle_date');
			$this->form_validation->set_rules('special_photo', 'Special Photo', 'callback_handle_upload');
			$this->form_validation->set_rules('stock_qty', 'Stock Quantity', 'trim|required|integer');

			if ($this->form_validation->run() === TRUE) {
				$update = array();
				
				//Sanitizing the POST values
				$update['special_id'] 			= $special_id;
				$update['special_name'] 		= $this->input->post('special_name');
				$update['special_description'] 	= $this->input->post('special_description');
				$update['special_price'] 		= $this->input->post('special_price');
				$update['start_date'] 			= $this->input->post('start_date');
				$update['end_date'] 			= $this->input->post('end_date');
				$update['special_photo'] 		= $this->input->post('special_photo');			
				$update['stock_qty'] 			= $this->input->post('stock_qty');			
					
				if ($this->Specials_model->updateSpecial($update)) {
				
					$this->session->set_flashdata('alert', '<p class="success">Special Updated Sucessfully!</p>');
				
				} else { 
				
					$this->session->set_flashdata('alert', '<p class="warning">Nothing Updated!</p>');
				
				}

				return TRUE;
			}
		}
	}

	public function _deleteSpecial($special_id = FALSE) {
    	if (!$this->user->hasPermissions('modify', 'admin/staffs')) {
		
			$this->session->set_flashdata('alert', '<p class="warning">Warning: You do not have permission to modify!</p>');
    	
    	} else { 
		
			if ($this->input->post('delete') === '1') {
					
				$this->Specials_model->deleteSpecial($special_id);
					
				$this->session->set_flashdata('alert', '<p class="success">Special Deleted Sucessfully!</p>');

			} else if (is_array($this->input->post('delete'))) {

				//sorting the post[remove_deal] array to rowid and qty.
				foreach ($this->input->post('delete') as $key => $value) {
					$special_id = $key;
				
					$this->Specials_model->deleteSpecial($special_id);
				}			
			
				$this->session->set_flashdata('alert', '<p class="success">Special(s) Deleted Sucessfully!</p>');

			}
		}
				
		return TRUE;
	}

 	public function handle_upload() {
		//loading upload library
		$this->load->library('upload');

		//setting upload preference
		$this->upload->set_upload_path($this->config->item('config_upload_path'));
		$this->upload->set_allowed_types($this->config->item('config_allowed_types'));
		$this->upload->set_max_filesize($this->config->item('config_max_size'));
		$this->upload->set_max_width($this->config->item('config_max_width'));
		$this->upload->set_max_height($this->config->item('config_max_height'));

		if (isset($_FILES['special_photo']) && !empty($_FILES['special_photo']['name'])) {

      		if ($this->upload->do_upload('special_photo')) {

        		// set a $_POST value for 'food_photo' that we can use later
        		$upload_data    = $this->upload->data();
        		if ($upload_data) {
        			$_POST['special_photo'] = $upload_data['file_name'];
        		}
        		return TRUE;        
      		} else {
        		
        		// possibly do some clean up ... then throw an error
        		$this->form_validation->set_message('handle_upload', $this->upload->display_errors());
        		return FALSE;
     		}
    	} else {
      	
        	$this->form_validation->set_message('handle_upload', 'The %s field is required.');
        	// set an empty $_POST value for 'food_photo' to be used on database queries
        	$_POST['special_photo'] = '';
      		return TRUE;
      	}
    }

 	public function handle_date($date) {
      		
     	
     	$human_to_unix = human_to_unix($date);
		if ( ! isset($human_to_unix)) {
        	$this->form_validation->set_message('handle_date', 'The %s field is not a valid date/time.');
      		return FALSE;
    	} else {
        	return TRUE;        
      	}
    }
}